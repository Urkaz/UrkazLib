plugins {
    // see https://fabricmc.net/develop/ for new versions
    id 'fabric-loom' version '1.10-SNAPSHOT' apply false
    // see https://projects.neoforged.net/neoforged/moddevgradle for new versions
    id 'net.neoforged.moddev' version '2.0.96' apply false
    // Uses Licensing plugin
    id "org.cadixdev.licenser" version "0.6.1" apply false
}

def versionPropsFile = file('gradle-version.properties')
def versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))

subprojects {
    apply plugin: 'org.cadixdev.licenser' // Applies licenser plugin to all projects

    def isCiBuild = System.getenv("CI") == "true"
    def isLocalBuild = !isCiBuild

    version = isLocalBuild ? getNextSnapshotVersion() : versionProps['mod_version']
    println "Building version: $version"

    group = maven_group

    license {
        setHeader(rootProject.file("LICENSE_HEADER"))

        ext {
            name = "Urkaz - Fran Sanchez"
            year = "2025"
            modname = rootProject.mod_name
        }

        include "**/*.java"

        ignoreFailures = true
    }
}

import groovy.xml.XmlSlurper
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

def getLastRemoteVersion(String group, String artifact, String repoUrl) {
    def groupPath = group.replace('.', '/')
    def metadataUrl = "${repoUrl}/${groupPath}/${artifact}/maven-metadata.xml"
    try {
        def client = HttpClient.newHttpClient()
        def request = HttpRequest.newBuilder()
                .uri(URI.create(metadataUrl))
                .GET()
                .build()
        def response = client.send(request, HttpResponse.BodyHandlers.ofInputStream())
        def metadata = new XmlSlurper().parse(response.body())
        return metadata.versioning.latest.text()
    } catch (Exception e) {
        println "Unable to retrieve remote version: ${e.message}"
        return null
    }
}

def getNextSnapshotVersion() {
    def lastRemote = getLastRemoteVersion('com.urkaz.urkazlib', 'urkazlib-common', 'https://maven.franserver.mywire.org/releases') ?: '1.0.0'
    def parts = lastRemote.tokenize('.').collect { it.toInteger() }
    parts[2] += 1 // Increment PATCH
    return "${parts.join('.')}-SNAPSHOT"
}